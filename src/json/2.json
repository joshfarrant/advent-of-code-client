{
  "meta": {
    "createdAt": 1702294446563
  },
  "puzzle": {
    "day": 2,
    "title": "Cube Conundrum"
  },
  "notes": "Fairly straightforward. It required more code than Day 1, but the solution was easier to find.\n\nI went a bit more functional with this one, especially on part 2. I could have taken it a bit further, but I think this implementation is more readable.\n",
  "solutions": {
    "part1": "import {\n  indexOf,\n  last,\n  map,\n  match,\n  pipe,\n  reduce,\n  replace,\n  split,\n  update,\n} from 'rambda';\n\nconst splitLines = split('\\n');\n\n// [R, G, B]\nconst criteria = [12, 13, 14];\nconst colors = ['red', 'green', 'blue'];\n\nconst gameMetaRegex = /^game\\s(\\d+):\\s/i;\nconst parseGameId = pipe(match(gameMetaRegex), last, Number);\nconst parseRound = pipe(\n  split(', '),\n  reduce(\n    (acc, group: string) => {\n      const [count, color] = group.split(' ');\n      const index = indexOf(color, colors);\n\n      return update(index, Number(count), acc);\n    },\n    [0, 0, 0],\n  ),\n);\n\nconst parseRounds = pipe(\n  replace(gameMetaRegex, ''),\n  split('; '),\n  map(parseRound),\n);\n\nconst parseGame = (game: string) => ({\n  id: parseGameId(game),\n  rounds: parseRounds(game),\n});\n\nconst isValidRound = (round: number[]): boolean =>\n  criteria.every((criterion, i) => criterion >= round[i]);\n\nexport default pipe(\n  splitLines,\n  map(parseGame),\n  reduce((acc, { id, rounds }) => {\n    const isValidGame = rounds.every(isValidRound);\n\n    return isValidGame ? acc + id : acc;\n  }, 0),\n);\n",
    "part2": "import {\n  always,\n  equals,\n  ifElse,\n  map,\n  match,\n  max,\n  pipe,\n  product,\n  reduce,\n  split,\n  sum,\n} from 'rambda';\n\nconst colors = ['red', 'green', 'blue'];\n\nconst parseCubes = (cubes: string) => {\n  const [count, color] = cubes.split(' ');\n\n  /* prettier-ignore */\n  return map(\n    ifElse(\n      equals(color),\n      always(Number(count)),\n      always(0),\n    ),\n  )(colors);\n};\nconst cubesRegex = /\\d+\\s[a-z]+/gi;\nconst parseGame = pipe(match(cubesRegex), map(parseCubes));\n\nconst getMaxima = reduce(\n  (maxSoFar, current: number[]) => [\n    max(maxSoFar[0], current[0]),\n    max(maxSoFar[1], current[1]),\n    max(maxSoFar[2], current[2]),\n  ],\n  [0, 0, 0],\n);\nconst calculateProductOfMaxima = pipe(getMaxima, product);\n\nexport default pipe(\n  split('\\n'),\n  map(parseGame),\n  map(calculateProductOfMaxima),\n  sum,\n);\n"
  }
}