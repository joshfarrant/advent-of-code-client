{
  "meta": {
    "createdAt": 1733932087245
  },
  "puzzle": {
    "day": 2,
    "title": "Red-Nosed Reports"
  },
  "notes": "",
  "solutions": {
    "part1": "import { all, aperture, pipe, split, map, filter, length } from 'rambda';\n\nconst isSafe = (a: number, b: number, direction: number): boolean => {\n  const diff = (b - a) * direction;\n  return diff >= 1 && diff <= 3;\n};\n\nconst processLine = (line: number[]): boolean => {\n  const direction = Math.sign(line[1] - line[0]);\n  return all(\n    (pair: [number, number]) => isSafe(pair[0], pair[1], direction),\n    aperture(2, line),\n  );\n};\n\nexport default (input: string): number => {\n  return pipe(\n    split('\\n'),\n    map(pipe(split(' '), map(Number))),\n    filter(processLine),\n    length,\n  )(input);\n};\n",
    "part2": "import { all, aperture, pipe, split, map, filter, length } from 'rambda';\n\nconst isSafe = (a: number, b: number, direction: number): boolean => {\n  const diff = (b - a) * direction;\n  return diff >= 1 && diff <= 3;\n};\n\nconst processLine = (line: number[]): boolean => {\n  const direction = Math.sign(line[1] - line[0]);\n  return all(\n    (pair: [number, number]) => isSafe(pair[0], pair[1], direction),\n    aperture(2, line),\n  );\n};\n\nconst processLineWithDampener = (line: number[]) => {\n  if (processLine(line)) {\n    return true;\n  }\n\n  for (let i = 0; i < line.length; i++) {\n    const lineWithoutI = [...line.slice(0, i), ...line.slice(i + 1)];\n\n    if (processLine(lineWithoutI)) {\n      return true;\n    }\n  }\n\n  return false;\n};\nexport default (input: string): number => {\n  return pipe(\n    split('\\n'),\n    map(pipe(split(' '), map(Number))),\n    filter(processLineWithDampener),\n    length,\n  )(input);\n};\n"
  }
}