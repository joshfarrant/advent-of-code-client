{
  "meta": {
    "createdAt": 1733755854367
  },
  "puzzle": {
    "day": 4,
    "title": "Ceres Search"
  },
  "notes": "",
  "solutions": {
    "part1": "import { map, pipe, split } from 'rambda';\n\nconst isInBounds = (arr: string[][], y: number, x: number): boolean => {\n  return y >= 0 && y < arr.length && x >= 0 && x < arr[y].length;\n};\n\ntype Coordinate = [y: number, x: number];\ntype Direction = 'N' | 'NE' | 'E' | 'SE' | 'S' | 'SW' | 'W' | 'NW';\n\nconst go: Record<Direction, (coord: Coordinate) => Coordinate> = {\n  N: ([y, x]) => [y - 1, x],\n  NE: ([y, x]) => [y - 1, x + 1],\n  E: ([y, x]) => [y, x + 1],\n  SE: ([y, x]) => [y + 1, x + 1],\n  S: ([y, x]) => [y + 1, x],\n  SW: ([y, x]) => [y + 1, x - 1],\n  W: ([y, x]) => [y, x - 1],\n  NW: ([y, x]) => [y - 1, x - 1],\n};\n\nconst countMatches = (searchString: string, input: string): number => {\n  const arr: string[][] = pipe(split('\\n'), map(split('')))(input);\n\n  let totalMatches = 0;\n\n  for (let y = 0; y < arr.length; y++) {\n    for (let x = 0; x < arr[y].length; x++) {\n      const char = arr[y][x];\n\n      if (char !== searchString[0]) {\n        continue;\n      }\n\n      let [initialY, initialX] = [y, x];\n      const matches = Object.values(go).filter(move => {\n        let [y, x] = move([initialY, initialX]);\n        let i = 1;\n\n        while (isInBounds(arr, y, x) && arr[y][x] === searchString[i]) {\n          i++;\n          if (i === searchString.length) {\n            return true;\n          }\n          [y, x] = move([y, x]);\n        }\n      });\n\n      totalMatches += matches.length;\n    }\n  }\n\n  return totalMatches;\n};\n\nexport default (input: string) => countMatches('XMAS', input);\n",
    "part2": "import { map, pipe, split } from 'rambda';\n\nconst isInBounds = (arr: string[][], y: number, x: number): boolean => {\n  return y >= 0 && y < arr.length && x >= 0 && x < arr[y].length;\n};\n\ntype Coordinate = [y: number, x: number];\ntype Direction = 'NE' | 'SE' | 'SW' | 'NW';\n\nconst go: Record<Direction, (coord: Coordinate) => Coordinate> = {\n  NE: ([y, x]) => [y - 1, x + 1],\n  SE: ([y, x]) => [y + 1, x + 1],\n  SW: ([y, x]) => [y + 1, x - 1],\n  NW: ([y, x]) => [y - 1, x - 1],\n};\n\nconst getMiddleChar = (str: string): string => {\n  return str[Math.floor(str.length / 2)];\n};\n\nconst countMatches = (searchString: string, input: string): number => {\n  const middleChar = getMiddleChar(searchString);\n\n  const arr: string[][] = pipe(split('\\n'), map(split('')))(input);\n\n  let totalMatches = 0;\n\n  for (let y = 0; y < arr.length; y++) {\n    for (let x = 0; x < arr[y].length; x++) {\n      const char = arr[y][x];\n\n      if (char !== middleChar) {\n        continue;\n      }\n\n      const allMatch = [\n        [go.NE([y, x]), go.SW([y, x])],\n        [go.SE([y, x]), go.NW([y, x])],\n      ].every(([[ay, ax], [by, bx]]) => {\n        if (!isInBounds(arr, ay, ax) || !isInBounds(arr, by, bx)) {\n          return false;\n        }\n\n        const str = `${arr[ay][ax]}${middleChar}${arr[by][bx]}`;\n        const reversedStr = str.split('').reverse().join('');\n\n        return str === searchString || reversedStr === searchString;\n      });\n\n      if (allMatch) {\n        totalMatches++;\n      }\n    }\n  }\n\n  return totalMatches;\n};\n\nexport default (input: string) => countMatches('MAS', input);\n"
  }
}