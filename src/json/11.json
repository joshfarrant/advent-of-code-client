{
  "meta": {
    "createdAt": 1733932087245
  },
  "puzzle": {
    "day": 11,
    "title": "Plutonian Pebbles"
  },
  "notes": "",
  "solutions": {
    "part1": "export default (input: string, blinks: number): number => {\n  let numbers = input.split(' ').map(Number);\n\n  for (let n = 1; n <= blinks; n++) {\n    let nextNumbers: number[] = [];\n\n    for (let i = 0; i < numbers.length; i++) {\n      const number = numbers[i];\n\n      // Case 1\n      if (number === 0) {\n        nextNumbers.push(1);\n        continue;\n      }\n\n      // Case 2\n      const numberStr = number.toString();\n      const numberLength = numberStr.length;\n\n      if (numberLength % 2 === 0) {\n        const left = Number(numberStr.slice(0, numberLength / 2));\n        const right = Number(numberStr.slice(numberLength / 2));\n\n        nextNumbers.push(left, right);\n        continue;\n      }\n\n      // Default case\n      nextNumbers.push(number * 2024);\n    }\n\n    numbers = nextNumbers;\n  }\n\n  return numbers.length;\n};\n",
    "part2": "import { sum } from 'rambda';\n\nconst mapInsertOrIncrement =\n  (map: Map<number, number>) =>\n  (key: number, value: number = 1) => {\n    const count = map.get(key) || 0;\n    map.set(key, count + value);\n    return map;\n  };\n\nexport default (input: string, blinks: number): number => {\n  let numberMap = input.split(' ').reduce((map, number) => {\n    map.set(Number(number), 1);\n    return map;\n  }, new Map<number, number>());\n\n  for (let n = 1; n <= blinks; n++) {\n    let newNumberMap = new Map<number, number>();\n    const insertOrIncrement = mapInsertOrIncrement(newNumberMap);\n\n    numberMap.forEach((count, number) => {\n      // Case 1\n      if (number === 0) {\n        insertOrIncrement(1, count);\n        return;\n      }\n\n      // Case 2\n      const numberStr = number.toString();\n      const numberLength = numberStr.length;\n\n      if (numberLength % 2 === 0) {\n        const left = Number(numberStr.slice(0, numberLength / 2));\n        const right = Number(numberStr.slice(numberLength / 2));\n\n        insertOrIncrement(left, count);\n        insertOrIncrement(right, count);\n        return;\n      }\n\n      insertOrIncrement(number * 2024, count);\n    });\n\n    numberMap = newNumberMap;\n  }\n\n  return sum(Array.from(numberMap.values()));\n};\n"
  }
}