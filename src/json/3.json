{
  "meta": {
    "createdAt": 1733755854367
  },
  "puzzle": {
    "day": 3,
    "title": "Mull It Over"
  },
  "notes": "",
  "solutions": {
    "part1": "const patternStart = 'mul(';\nconst patternSeparator = ',';\nconst patternEnd = ')';\n\nexport default (input: string): number => {\n  let inPattern = false;\n  let result = 0;\n  let tempStr = '';\n  let tempTotal = 1;\n\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i];\n\n    // Starting pattern\n    if (\n      char === patternStart.at(-1) &&\n      input.slice(i - patternStart.length + 1, i + 1) === patternStart\n    ) {\n      inPattern = true;\n      continue;\n    }\n\n    // Ending pattern\n    if (inPattern && char === patternEnd) {\n      inPattern = false;\n      tempTotal *= parseInt(tempStr, 10);\n      result += tempTotal;\n\n      tempStr = '';\n      tempTotal = 1;\n      continue;\n    }\n\n    // Pattern separator\n    if (inPattern && char === patternSeparator) {\n      tempTotal *= parseInt(tempStr, 10);\n      tempStr = '';\n      continue;\n    }\n\n    // Number in pattern\n    if (inPattern && !isNaN(parseInt(char, 10))) {\n      tempStr += char;\n      continue;\n    }\n\n    // Non-number in pattern\n    if (inPattern) {\n      inPattern = false;\n      tempTotal = 1;\n      tempStr = '';\n      continue;\n    }\n  }\n\n  return result;\n};\n",
    "part2": "const patternStart = 'mul(';\nconst patternSeparator = ',';\nconst patternEnd = ')';\nconst enablePattern = 'do()';\nconst disablePattern = `don't()`;\n\nconst isEndOfPattern = (\n  pattern: string,\n  char: string,\n  input: string,\n  i: number,\n): boolean =>\n  char === pattern.at(-1) &&\n  input.slice(i - pattern.length + 1, i + 1) === pattern;\n\nexport default (input: string): number => {\n  let inPattern = false;\n  let result = 0;\n  let tempStr = '';\n  let tempTotal = 1;\n  let isEnabled = true;\n\n  for (let i = 0; i < input.length; i++) {\n    const char = input[i];\n\n    if (isEndOfPattern(enablePattern, char, input, i)) {\n      isEnabled = true;\n      continue;\n    }\n\n    if (!isEnabled) continue;\n\n    if (isEndOfPattern(disablePattern, char, input, i)) {\n      isEnabled = false;\n      continue;\n    }\n\n    // Starting pattern\n    if (isEndOfPattern(patternStart, char, input, i)) {\n      inPattern = true;\n      continue;\n    }\n\n    // Ending pattern\n    if (inPattern && char === patternEnd) {\n      inPattern = false;\n      tempTotal *= parseInt(tempStr, 10);\n      result += tempTotal;\n\n      tempStr = '';\n      tempTotal = 1;\n      continue;\n    }\n\n    // Pattern separator\n    if (inPattern && char === patternSeparator) {\n      tempTotal *= parseInt(tempStr, 10);\n      tempStr = '';\n      continue;\n    }\n\n    // Number in pattern\n    if (inPattern && !isNaN(parseInt(char, 10))) {\n      tempStr += char;\n      continue;\n    }\n\n    // Non-number in pattern\n    if (inPattern) {\n      inPattern = false;\n      tempTotal = 1;\n      tempStr = '';\n      continue;\n    }\n  }\n\n  return result;\n};\n"
  }
}