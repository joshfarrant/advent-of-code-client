{
  "meta": {
    "createdAt": 1733932087245
  },
  "puzzle": {
    "day": 5,
    "title": "Print Queue"
  },
  "notes": "",
  "solutions": {
    "part1": "import {\n  addIndex,\n  curry,\n  filter,\n  map,\n  pipe,\n  sort,\n  split,\n  sum,\n  tap,\n} from 'rambda';\n\nconst splitEach = (separator: string) => map(split(separator));\n\ntype Page = number;\ntype Pages = Page[];\ntype Rule = [Page, Page];\n\nconst processRules = map<string, Rule>(\n  pipe(split('|'), ([a, b]) => [Number(a), Number(b)] as Rule),\n);\nconst processPages = map<string, Pages>(pipe(split(','), map(Number)));\n\nconst filterWithIndex = addIndex(filter);\n\nconst getMiddleItem = (arr: number[]): number =>\n  arr[Math.floor(arr.length / 2)];\n\nconst equalWhenStringified = (a: unknown, b: unknown): boolean =>\n  JSON.stringify(a) === JSON.stringify(b);\n\nconst sortPagesWithRules = (rules: Rule[]) =>\n  sort<number>((pageA, pageB) => {\n    for (const [ruleA, ruleB] of rules) {\n      if (pageA === ruleA && pageB === ruleB) {\n        return -1;\n      }\n      if (pageA === ruleB && pageB === ruleA) {\n        return 1;\n      }\n    }\n    return 0;\n  });\n\nexport default (input: string) => {\n  const [rules, pagesArr] = pipe(\n    split('\\n\\n'),\n    splitEach('\\n'),\n    ([rules, pages]): [Rule[], Pages[]] => [\n      processRules(rules),\n      processPages(pages),\n    ],\n  )(input);\n\n  return pipe(\n    map(sortPagesWithRules(rules)),\n    filterWithIndex((pages: Pages[], i: number) =>\n      equalWhenStringified(pages, pagesArr[i]),\n    ),\n    map(getMiddleItem),\n    sum,\n  )(pagesArr);\n};\n",
    "part2": "import {\n  addIndex,\n  curry,\n  filter,\n  map,\n  not,\n  pipe,\n  sort,\n  split,\n  sum,\n  tap,\n} from 'rambda';\n\nconst splitEach = (separator: string) => map(split(separator));\n\ntype Page = number;\ntype Pages = Page[];\ntype Rule = [Page, Page];\n\nconst processRules = map<string, Rule>(\n  pipe(split('|'), ([a, b]) => [Number(a), Number(b)] as Rule),\n);\nconst processPages = map<string, Pages>(pipe(split(','), map(Number)));\n\nconst filterWithIndex = addIndex(filter);\n\nconst getMiddleItem = (arr: number[]): number =>\n  arr[Math.floor(arr.length / 2)];\n\nconst equalWhenStringified = (a: unknown, b: unknown): boolean =>\n  JSON.stringify(a) === JSON.stringify(b);\n\nconst sortPagesWithRules = (rules: Rule[]) =>\n  sort<number>((pageA, pageB) => {\n    for (const [ruleA, ruleB] of rules) {\n      if (pageA === ruleA && pageB === ruleB) {\n        return -1;\n      }\n      if (pageA === ruleB && pageB === ruleA) {\n        return 1;\n      }\n    }\n    return 0;\n  });\n\nexport default (input: string) => {\n  const [rules, pagesArr] = pipe(\n    split('\\n\\n'),\n    splitEach('\\n'),\n    ([rules, pages]): [Rule[], Pages[]] => [\n      processRules(rules),\n      processPages(pages),\n    ],\n  )(input);\n\n  return pipe(\n    map(sortPagesWithRules(rules)),\n    filterWithIndex((pages: Pages[], i: number) =>\n      not(equalWhenStringified(pages, pagesArr[i])),\n    ),\n    map(getMiddleItem),\n    sum,\n  )(pagesArr);\n};\n"
  }
}