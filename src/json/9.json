{
  "meta": {
    "createdAt": 1733932087245
  },
  "puzzle": {
    "day": 9,
    "title": "Disk Fragmenter"
  },
  "notes": "",
  "solutions": {
    "part1": "const removeCharsFromStart = (input: string, count: number): string =>\n  input.substring(count);\n\nconst removeCharsFromEnd = (input: string, count: number): string =>\n  input.substring(0, input.length - count);\n\nconst decrementFirstDigit = (input: string): string => {\n  let firstDigit = input.at(0);\n  let rest = removeCharsFromStart(input, 1);\n\n  return (Number(firstDigit) - 1).toString() + rest;\n};\n\nconst decrementLastDigit = (input: string): string => {\n  let lastDigit = input.at(-1);\n  let rest = removeCharsFromEnd(input, 1);\n\n  return rest + (Number(lastDigit) - 1).toString();\n};\n\nexport default (input: string): number => {\n  let checksum = 0;\n\n  let idx = 0;\n  let isFile = true;\n\n  let fileId = 0;\n  let maxFileId = Math.floor(input.length / 2);\n\n  while (input.length > 0) {\n    const firstDigit = Number(input.at(0));\n    const lastDigit = Number(input.at(-1));\n\n    if (firstDigit === 0) {\n      input = removeCharsFromStart(input, 1);\n\n      if (isFile) {\n        fileId++;\n      }\n\n      isFile = !isFile;\n      continue;\n    }\n\n    if (lastDigit === 0) {\n      // Minus 2 as we can remove the last digit and the space\n      input = removeCharsFromEnd(input, 2);\n      maxFileId--;\n      continue;\n    }\n\n    if (isFile) {\n      // We're looking at a file which is non-zero\n      checksum += fileId * idx;\n\n      input = decrementFirstDigit(input);\n      idx++;\n      continue;\n    }\n\n    // We're looking at space value which is non-zero\n    // We also have a last digit which is a file and non-zero\n    input = decrementLastDigit(input);\n\n    checksum += maxFileId * idx;\n\n    input = decrementFirstDigit(input);\n\n    idx++;\n  }\n\n  return checksum;\n};\n",
    "part2": "type File = {\n  type: 'file';\n  id: number;\n  size: number;\n};\n\ntype Space = {\n  type: 'space';\n  size: number;\n};\n\ntype Disk = (File | Space)[];\n\nconst debug = (disk: Disk) => {\n  console.debug(\n    disk.reduce((str, item) => {\n      if (item.type === 'file') {\n        return str + `${item.id}`.repeat(item.size);\n      }\n\n      return str + '.'.repeat(item.size);\n    }, ''),\n  );\n};\n\nexport default (input: string): number => {\n  let disk: Disk = [];\n  const totalFiles = (input.length + 1) / 2;\n\n  for (let i = 0; i < input.length; i += 2) {\n    const [fileSize, spaceSize = 0] = input\n      .slice(i, i + 2)\n      .split('')\n      .map(Number);\n    const id = i / 2;\n\n    const file: File = { type: 'file', id: id, size: fileSize };\n\n    disk.push(file);\n\n    if (spaceSize > 0) {\n      const space: Space = { type: 'space', size: spaceSize };\n      disk.push(space);\n    }\n  }\n\n  for (let i = totalFiles - 1; i >= 0; i--) {\n    let fileIdx = disk.findIndex(item => item.type === 'file' && item.id === i);\n    const file = disk[fileIdx];\n\n    if (!file || file.type !== 'file') {\n      throw new Error('File not found');\n    }\n\n    const spaceIdx = disk.findIndex(\n      (item, i) =>\n        item.type === 'space' && item.size >= file.size && i < fileIdx,\n    );\n\n    if (spaceIdx === -1) {\n      continue;\n    }\n\n    const space = disk[spaceIdx];\n\n    const remainingSpace = space.size - file.size;\n\n    // Replace the file with space\n    disk[fileIdx] = { type: 'space', size: file.size };\n\n    if (remainingSpace === 0) {\n      disk[spaceIdx] = file;\n      continue;\n    }\n\n    const newSpace: Space = { type: 'space', size: remainingSpace };\n\n    // Create file and space in place of old space\n    disk.splice(spaceIdx, 1, file, newSpace);\n\n    // We've removed one and added two items before the fileIdx, so increment it by 1\n    fileIdx += 1;\n\n    // Combine contiguous spaces\n    for (let j = 0; j < disk.length - 1; j++) {\n      if (disk[j].type === 'space' && disk[j + 1].type === 'space') {\n        disk[j].size += disk[j + 1].size;\n        disk.splice(j + 1, 1);\n        // Check the current index again as it now contains the combined space\n        j--;\n      }\n    }\n  }\n\n  const x = disk\n    .flatMap(item => {\n      const value = item.type === 'file' ? item.id : 0;\n      return Array(item.size).fill(value);\n    })\n    .map((val, i) => val * i)\n    .reduce((acc, val) => acc + val, 0);\n\n  return x;\n};\n"
  }
}