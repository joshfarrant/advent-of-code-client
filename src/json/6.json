{
  "meta": {
    "createdAt": 1733755854367
  },
  "puzzle": {
    "day": 6,
    "title": "Guard Gallivant"
  },
  "notes": "",
  "solutions": {
    "part1": "const stringTo2DArray = (str: string) => str.split('\\n').map(x => x.split(''));\n\ntype Coordinate = [y: number, x: number];\nconst directions = ['N', 'E', 'S', 'W'] as const;\ntype Direction = (typeof directions)[number];\n\nconst go: Record<Direction, (coord: Coordinate) => Coordinate> = {\n  N: ([y, x]) => [y - 1, x],\n  E: ([y, x]) => [y, x + 1],\n  S: ([y, x]) => [y + 1, x],\n  W: ([y, x]) => [y, x - 1],\n};\n\nconst turnRight = (current: Direction): Direction =>\n  directions[(directions.indexOf(current) + 1) % directions.length];\n\nconst CHAR = {\n  START: '^',\n  WALL: '#',\n};\n\nconst findStart = (arr: string[][]): Coordinate => {\n  for (let y = 0; y < arr.length; y++) {\n    for (let x = 0; x < arr[y].length; x++) {\n      if (arr[y][x] === CHAR.START) return [y, x];\n    }\n  }\n  throw new Error(`no start character \"${CHAR.START}\" found`);\n};\n\nconst isInBounds = (arr: string[][], [y, x]: Coordinate) =>\n  y >= 0 && y < arr.length && x >= 0 && x < arr[y].length;\n\nexport default (input: string): number => {\n  const arr = stringTo2DArray(input);\n  const start = findStart(arr);\n  arr[start[0]][start[1]] = '.';\n\n  const visited = new Set<string>();\n\n  let current = start;\n  let direction: Direction = 'N';\n\n  visited.add(start.join(','));\n\n  while (true) {\n    const [nextY, nextX] = go[direction](current);\n\n    if (!isInBounds(arr, [nextY, nextX])) {\n      return visited.size;\n    }\n\n    const nextChar = arr[nextY][nextX];\n\n    if (nextChar === CHAR.WALL) {\n      direction = turnRight(direction);\n      continue;\n    }\n\n    if (nextChar === '.') {\n      current = [nextY, nextX];\n      visited.add(current.join(','));\n      continue;\n    }\n  }\n};\n",
    "part2": "export default (input: string) => {\n  throw new Error('TODO');\n};\n"
  }
}